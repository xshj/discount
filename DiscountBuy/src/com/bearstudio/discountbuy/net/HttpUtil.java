package com.bearstudio.discountbuy.net;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.SocketTimeoutException;import java.util.HashMap;import java.util.Map.Entry;import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpConnectionManager;import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;import org.apache.commons.httpclient.methods.ByteArrayRequestEntity;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.params.HttpConnectionManagerParams;import org.apache.commons.httpclient.params.HttpMethodParams;import org.apache.http.HttpStatus;public class HttpUtil {	private static final String QSTRING_EQUAL = "=";	private static final String QSTRING_SPLIT = "&";	private static final String QURL_SPLIT = "?";	private static final HttpConnectionManager connectionManager;	private static final HttpClient client;	static {		HttpConnectionManagerParams params = loadHttpConfFromFile();		connectionManager = new MultiThreadedHttpConnectionManager();		connectionManager.setParams(params);		client = new HttpClient(connectionManager);	}	private static HttpConnectionManagerParams loadHttpConfFromFile() {		HttpConnectionManagerParams params = new HttpConnectionManagerParams();		params.setConnectionTimeout(30000);// 连接超时时间		params.setSoTimeout(15000);// 读取超时时间		params.setStaleCheckingEnabled(true);		params.setTcpNoDelay(true);		params.setDefaultMaxConnectionsPerHost(100);// HOST并发数默认100		params.setMaxTotalConnections(150);// 设置最大连接数		params.setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(0, false));		return params;	}	/**	 * HTTP协议POST请求方法	 * 	 * 该方法默认内容使用UTF-8编码	 * @param url 请求地址	 * @param content 报体内容	 * @return 应答信息	 */	public static String post(String url, String content) {		if(content==null){			return null;		}		return post(url, "UTF-8", content);	}	/**	 * HTTP协议POST请求方法	 * 	 * @param url 请求地址	 * @param encode 报体内容编码类型	 * @param content 请求串	 * @return 应答信息	 */	public static String post(String url, String encode, String content) {		try {			return post(url, content.getBytes(encode));		} catch (UnsupportedEncodingException e) {			return null;		}	}	/**	 * HTTP协议POST请求方法	 * 	 * @param url 请求地址	 * @param encode 报文内容编码类型	 * @param content 请求要素	 * @return 应答信息	 */	public static String post(String url, String encode,HashMap<String, String> content) {		return post(url, encode, CreateLinkString(content));	}	/**	 * HTTP协议POST请求方法	 * 	 * @param url 请求地址	 * @param content 内容	 * @return 应答信息	 */	public static String get(String url, String content) {		return get(url + QURL_SPLIT + content);	}	/**	 * HTTP协议GET请求方法	 * 	 * @param url 请求地址(不用带问号)	 * @param content 报体内容	 * @return 应答信息	 */	public static String get(String url, HashMap<String, String> content) {		return get(url, CreateLinkString(content));	}	/**	 * HTTP GET 发送方法	 * 	 * @param url 请求串与内容	 * @param charset 获取响应字符集类型	 * @return 应答串	 */	private static String get(String url) {		GetMethod method = new GetMethod(url);		method.addRequestHeader("Connection", "Keep-Alive");		method.getParams().setCookiePolicy(org.apache.commons.httpclient.cookie.CookiePolicy.IGNORE_COOKIES);		method.addRequestHeader("Content-Type","application/x-www-form-urlencoded");		try {			int statusCode = client.executeMethod(method);			if (statusCode != HttpStatus.SC_OK) {				return null;			}			return InputStream2String(method.getResponseBodyAsStream(), method.getResponseCharSet());		} catch (SocketTimeoutException e) {			return null;		} catch (IOException e) {			return null;		}	}	/**	 * HTTP POST 发送方法	 * 	 * @param url 请求地址	 * @param content 内容	 * @param charset 获取响应字符集类型	 * @return 应答串	 */	private static String post(String url, byte[] content) {		PostMethod method = new PostMethod(url);		method.addRequestHeader("Connection", "Keep-Alive");		method.getParams().setCookiePolicy(org.apache.commons.httpclient.cookie.CookiePolicy.IGNORE_COOKIES);		method.setRequestEntity(new ByteArrayRequestEntity(content));		method.addRequestHeader("Content-Type","application/x-www-form-urlencoded");		try {			int statusCode = client.executeMethod(method);			if (statusCode != HttpStatus.SC_OK) {				return null;			}			return InputStream2String(method.getResponseBodyAsStream(), method.getResponseCharSet());		} catch (SocketTimeoutException e) {			e.printStackTrace();			return null;		} catch (IOException e) {			e.printStackTrace();			return null;		}	}	/**	 * 集合拼接字符串方法	 * 	 * @param params 请求元素	 * @return 	 */	private static String CreateLinkString(HashMap<String, String> params){		StringBuffer sb = new StringBuffer();		for (Entry<String, String> pair : params.entrySet()) {			sb.append(pair.getKey()).append(QSTRING_EQUAL).append(pair.getValue()).append(QSTRING_SPLIT);		}		return sb.substring(0, sb.length()-1).toString();	}	/**	 * 字节输入流转字符流	 * 	 * @param input 输入流	 * @param encode 编码类型	 * @return 字符串	 */	private static String InputStream2String(InputStream input, String encode) {		BufferedReader br = null;		try {			if (encode == null || encode.equals("")) {				encode="UTF-8";			}			br = new BufferedReader(new InputStreamReader(input, encode));			StringBuffer sb = new StringBuffer();			String line = "";			while ((line = br.readLine()) != null) {				sb.append(line);			}			return sb.toString();		} catch (UnsupportedEncodingException e) {			return null;		} catch (IOException e) {			return null;		} finally {			try {				if (br != null) {					br.close();				}				if (input != null) {					input.close();				}			} catch (IOException e) {				return null;			}		}	}}